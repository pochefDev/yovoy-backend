// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace yovoyenruta_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250327041443_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Achievement", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("achievements");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.AssignmentLog", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("reason")
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("route_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("vehicle_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("operator_id");

                    b.HasIndex("route_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("assignment_log");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Certification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("certifications");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Feature", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("feature1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("feature");

                    b.HasKey("id");

                    b.ToTable("features");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Incident", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime");

                    b.Property<string>("details")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("trip_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex(new[] { "trip_id" }, "UQ__incident__302A5D9F281CDF4B")
                        .IsUnique()
                        .HasFilter("[trip_id] IS NOT NULL");

                    b.ToTable("incidents");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Maintenance", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("actual_date")
                        .HasColumnType("datetime");

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("scheduled_date")
                        .HasColumnType("datetime");

                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("vehicle_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("maintenances");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Operator", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("current_status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("operator_number")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double?>("salary")
                        .HasColumnType("float");

                    b.Property<string>("service_zone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("shift_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("years_experience")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("shift_id");

                    b.HasIndex("user_id");

                    b.ToTable("operators");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.OperatorAchievement", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("achievement_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("obtained_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("percentage")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("achievement_id");

                    b.HasIndex("operator_id");

                    b.ToTable("operator_achievements");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.OperatorCertification", b =>
                {
                    b.Property<Guid?>("certification_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("is_valid")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("obtained_date")
                        .HasColumnType("date");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("certification_id");

                    b.HasIndex("operator_id");

                    b.ToTable("operator_certifications");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.OperatorPreference", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("route_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("operator_id");

                    b.HasIndex("route_id");

                    b.ToTable("operator_preferences");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Rating", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("stars")
                        .HasColumnType("int");

                    b.Property<Guid?>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("waiting_time_minutes")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("operator_id");

                    b.HasIndex("user_id");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Route", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("destination")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("origin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("terminal_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("zone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("terminal_id");

                    b.ToTable("routes");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Shift", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("actual_end")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("actual_start")
                        .HasColumnType("datetime");

                    b.Property<string>("attendance_status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("auto_assigned")
                        .HasColumnType("bit");

                    b.Property<Guid?>("route_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("scheduled_end")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("scheduled_start")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("vehicle_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("route_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("shifts");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Terminal", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("terminals");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Trip", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("end_time")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("route_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("start_time")
                        .HasColumnType("datetime");

                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("vehicle_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("operator_id");

                    b.HasIndex("route_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("trips");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("creation_date")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("enrollment_date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("user_type_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("user_type_id");

                    b.HasIndex(new[] { "email" }, "UQ__users__AB6E6164EA563539")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("users");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.UserType", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("user_type1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_type");

                    b.HasKey("id");

                    b.ToTable("user_types");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("capacity")
                        .HasColumnType("int");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("license_plate")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("model")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("size")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("terminal_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("terminal_id");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.VehicleAvailability", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("day_of_week")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<TimeOnly?>("end_time")
                        .HasColumnType("time");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("start_time")
                        .HasColumnType("time");

                    b.Property<Guid?>("vehicle_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("vehicle_availability");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.VehicleFeature", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("feature_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("vehicle_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("feature_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("vehicle_features");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.AssignmentLog", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Operator", "_operator")
                        .WithMany("assignment_logs")
                        .HasForeignKey("operator_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Route", "route")
                        .WithMany("assignment_logs")
                        .HasForeignKey("route_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Vehicle", "vehicle")
                        .WithMany("assignment_logs")
                        .HasForeignKey("vehicle_id");

                    b.Navigation("_operator");

                    b.Navigation("route");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Incident", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Trip", "trip")
                        .WithOne("incident")
                        .HasForeignKey("yovoyenruta_backend.Data.Entities.Incident", "trip_id");

                    b.Navigation("trip");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Maintenance", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Vehicle", "vehicle")
                        .WithMany("maintenances")
                        .HasForeignKey("vehicle_id");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Operator", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Shift", "shift")
                        .WithMany("operators")
                        .HasForeignKey("shift_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.User", "user")
                        .WithMany("operators")
                        .HasForeignKey("user_id");

                    b.Navigation("shift");

                    b.Navigation("user");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.OperatorAchievement", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Achievement", "achievement")
                        .WithMany("operator_achievements")
                        .HasForeignKey("achievement_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Operator", "_operator")
                        .WithMany("operator_achievements")
                        .HasForeignKey("operator_id");

                    b.Navigation("_operator");

                    b.Navigation("achievement");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.OperatorCertification", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Certification", "certification")
                        .WithMany()
                        .HasForeignKey("certification_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Operator", "_operator")
                        .WithMany()
                        .HasForeignKey("operator_id");

                    b.Navigation("_operator");

                    b.Navigation("certification");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.OperatorPreference", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Operator", "_operator")
                        .WithMany("operator_preferences")
                        .HasForeignKey("operator_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Route", "route")
                        .WithMany("operator_preferences")
                        .HasForeignKey("route_id");

                    b.Navigation("_operator");

                    b.Navigation("route");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Rating", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Operator", "_operator")
                        .WithMany("ratings")
                        .HasForeignKey("operator_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.User", "user")
                        .WithMany("ratings")
                        .HasForeignKey("user_id");

                    b.Navigation("_operator");

                    b.Navigation("user");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Route", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Terminal", "terminal")
                        .WithMany("routes")
                        .HasForeignKey("terminal_id");

                    b.Navigation("terminal");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Shift", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Route", "route")
                        .WithMany("shifts")
                        .HasForeignKey("route_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Vehicle", "vehicle")
                        .WithMany("shifts")
                        .HasForeignKey("vehicle_id");

                    b.Navigation("route");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Trip", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Operator", "_operator")
                        .WithMany("trips")
                        .HasForeignKey("operator_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Route", "route")
                        .WithMany("trips")
                        .HasForeignKey("route_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Vehicle", "vehicle")
                        .WithMany("trips")
                        .HasForeignKey("vehicle_id");

                    b.Navigation("_operator");

                    b.Navigation("route");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.User", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.UserType", "user_type")
                        .WithMany("users")
                        .HasForeignKey("user_type_id");

                    b.Navigation("user_type");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Vehicle", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Terminal", "terminal")
                        .WithMany("vehicles")
                        .HasForeignKey("terminal_id");

                    b.Navigation("terminal");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.VehicleAvailability", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Vehicle", "vehicle")
                        .WithMany("vehicle_availabilities")
                        .HasForeignKey("vehicle_id");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.VehicleFeature", b =>
                {
                    b.HasOne("yovoyenruta_backend.Data.Entities.Feature", "feature")
                        .WithMany("vehicle_features")
                        .HasForeignKey("feature_id");

                    b.HasOne("yovoyenruta_backend.Data.Entities.Vehicle", "vehicle")
                        .WithMany("vehicle_features")
                        .HasForeignKey("vehicle_id");

                    b.Navigation("feature");

                    b.Navigation("vehicle");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Achievement", b =>
                {
                    b.Navigation("operator_achievements");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Feature", b =>
                {
                    b.Navigation("vehicle_features");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Operator", b =>
                {
                    b.Navigation("assignment_logs");

                    b.Navigation("operator_achievements");

                    b.Navigation("operator_preferences");

                    b.Navigation("ratings");

                    b.Navigation("trips");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Route", b =>
                {
                    b.Navigation("assignment_logs");

                    b.Navigation("operator_preferences");

                    b.Navigation("shifts");

                    b.Navigation("trips");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Shift", b =>
                {
                    b.Navigation("operators");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Terminal", b =>
                {
                    b.Navigation("routes");

                    b.Navigation("vehicles");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Trip", b =>
                {
                    b.Navigation("incident");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.User", b =>
                {
                    b.Navigation("operators");

                    b.Navigation("ratings");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.UserType", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("yovoyenruta_backend.Data.Entities.Vehicle", b =>
                {
                    b.Navigation("assignment_logs");

                    b.Navigation("maintenances");

                    b.Navigation("shifts");

                    b.Navigation("trips");

                    b.Navigation("vehicle_availabilities");

                    b.Navigation("vehicle_features");
                });
#pragma warning restore 612, 618
        }
    }
}
